{"version":3,"sources":["pages/HomePage/index.jsx","components/NavBar/index.jsx","components/Card/index.jsx","pages/GamePage/index.jsx","pages/SettingsPage/index.jsx","constants/index.js","App.js","utilities/index.js","serviceWorker.js","index.js"],"names":["HomePage","NavBar","to","exact","Card","flipped","onClick","matched","number","symbol","className","data-number","GamePage","deck","onReset","counter","map","card","i","key","SettingsPage","symbols","allCards","concat","clickedCardPrevious","App","createNewDeck","createDeck","arr","j","inPlace","base","length","Math","floor","random","shuffle","useState","setDeck","path","component","e","clickedCard","target","dataset","setTimeout","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aaa3e7c3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst HomePage = () => <div>I am the home page!!!</div>\r\n\r\nexport default HomePage","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport './NavBar.css'\r\n\r\nconst NavBar = () =>\r\n<nav>\r\n<ul>\r\n  <li>\r\n    <NavLink to=\"/\" exact>Home</NavLink>\r\n  </li>\r\n  <li>\r\n    <NavLink to=\"/game\">Game</NavLink>\r\n  </li>\r\n  <li>\r\n    <NavLink to=\"/settings\">Settings</NavLink>\r\n  </li>\r\n</ul>\r\n</nav>\r\n\r\nexport default NavBar","import React from 'react'\r\nimport './Card.css'\r\n\r\nconst Card = ({ flipped, onClick, matched, number, symbol }) => (\r\n<div className=\"card\" onClick={onClick} data-number={number} >\r\n    {matched ? '✓' : flipped ? symbol : 'X'}\r\n    </div>\r\n)\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { Card } from \"../../components\";\r\nimport './GamePage.css'\r\n\r\nconst GamePage = ({ deck = [], onClick, onReset, counter }) => (\r\n  <div className='game-page'>\r\n  <div className='deck'>\r\n    {deck.map((card, i) => (\r\n      <Card key={i} number={i} {...card} onClick={onClick}  />\r\n    ))}\r\n  </div>\r\n   <button onClick={onReset}>Reset</button>\r\n   </div>\r\n\r\n);\r\n\r\nexport default GamePage;\r\n","import React from 'react'\r\n\r\nconst SettingsPage = () => <div>I am the settings page!!!</div>\r\n\r\nexport default SettingsPage","export const symbols = [\r\n    \"🐻\",\r\n    \"🐶\",\r\n    \"🐭\",\r\n    \"🐔\",\r\n    \"🐸\",\r\n    \"🐱\",\r\n    \"🐯\",\r\n    \"🦊\",\r\n    \"🐺\",\r\n    \"🐵\",\r\n    \"🐷\",\r\n    \"🐹\",\r\n    \"🐰\"\r\n  ];","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { HomePage, GamePage, SettingsPage } from \"./pages\";\nimport { symbols } from \"./constants\";\nimport { createDeck, shuffle } from \"./utilities\";\n\nconst allCards = symbols.concat(symbols);\nvar clickedCardPrevious=-1;\nvar counter = 0;\n\nfunction App() {\n  const createNewDeck = () => createDeck (shuffle(allCards));\n  const [deck, setDeck] = useState(createNewDeck());\n  const onReset = () => {\n    setDeck(createNewDeck());\n    counter=0;\n  }\n\n\n  const onClick = (e) => {\n    counter++;\n     const clickedCard = +e.target.dataset.number\n    setDeck(\n      deck.map((card, i) => \n    i !==clickedCard ? card : {...card, flipped: !card.flipped}\n    ),\n    )\n    if (clickedCardPrevious!==-1 && deck[clickedCardPrevious].symbol ===deck[clickedCard].symbol){\n      deck[clickedCardPrevious].matched=true;\n      setTimeout(() => {\n      setDeck(\n        deck.map((card, i) => \n      (i===clickedCard) ? {...card, matched: true} : card\n      ),\n      )},200);\n\n    }else if (clickedCardPrevious!==-1 && deck[clickedCardPrevious].symbol !==deck[clickedCard].symbol){\n      \n      setTimeout(() => {  \n      setDeck(\n        deck.map((card, i) => \n      card = {...card, flipped: false}\n      ),\n      )},1000);\n\n    }\n\n\n    clickedCardPrevious = clickedCard;\n    if(counter%2===0){\n      clickedCardPrevious=-1;\n    }\n    console.log(clickedCardPrevious);\n\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={HomePage} />\n      <Route path=\"/game\" exact>\n        <GamePage deck={deck} onClick={onClick} onReset={onReset} counter={counter} />\n      </Route>\n      <Route path=\"/settings\" exact component={SettingsPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","export const createDeck = (symbols) =>\r\n  symbols.map((symbol) => ({ symbol, flipped: false, matched: false }));\r\n\r\n  export const shuffle = (arr, inPlace = true) => {\r\n    // shallow copy if not inPlace, modifying the input array otherwise\r\n    const base = inPlace ? arr : [].concat(arr);\r\n    for (let i = arr.length, j; i; ) {\r\n      j = Math.floor(Math.random() * i);\r\n      [base[i], base[j]] = [base[j], base[--i]];\r\n    }\r\n    return base;\r\n  };\r\n  \r\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport { NavBar } from './components';\n\nReactDOM.render(\n  <Router>\n  <React.StrictMode>\n    <NavBar />\n    <App />\n  </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}